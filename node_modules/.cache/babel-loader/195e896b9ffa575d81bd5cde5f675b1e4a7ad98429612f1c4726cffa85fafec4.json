{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\n// import { TileList } from \"../../components/tileList/TileList\";\n\n// export const ContactsPage = ({currentContacts, addContact}) => {\n//   /*\n//   Define state variables for \n//   contact info and duplicate check\n//   */\n//  const [currentName, setCurrentName] = useState('');\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\n//  const [currentEmail, setCurrentEmail] = useState('');\n//  const [isDuplicate, setIsDuplicate] = useState(false);\n//  const [contacts, setContacts] = useState(currentContacts || []);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     /*\n//     Add contact info and clear data\n//     if the contact name is not a duplicate\n//     */\n\n//    if(!isDuplicate){\n//     addContact(currentName, currentPhoneNumber, currentEmail);\n//     setContacts(addContact);\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//    }\n//    /*if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\n//     addContact(newContact); // Callback to notify the parent component\n//     // Clear the form after successful submission\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//   }*/\n//   };\n\n//   /*\n//   Using hooks, check for contact name in the \n//   contacts array variable in props\n//   */\n//   useEffect(() => {\n//     const isDuplicate = contacts.some((contact) => contact.name === currentName);\n//     setIsDuplicate(isDuplicate);\n//   }, [currentName, contacts]);\n\n//   return (\n//     <div>\n//       <section>\n//         <h2>Add Contact</h2> \n//         <ContactForm\n//           name={currentName}\n//           phone={currentPhoneNumber}\n//           email={currentEmail}\n//           setName={setCurrentName}\n//           setPhone={setCurrentPhoneNumber}\n//           setEmail={setCurrentEmail}\n//           handleSubmit={handleSubmit}\n//           isNameDuplicate={setIsDuplicate}\n//         />\n//       </section>\n//       <hr />\n//       <section>\n//         <h2>Contacts</h2>\n//         <TileList tiles={contacts} />\n//       </section>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from \"react\";\nimport { TileList } from '../../components/tileList/TileList';\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicateName, setDuplicateName] = useState(false);\n  useEffect(() => {\n    let exists = contacts.find(contact => contact.name === name);\n    if (exists) {\n      setDuplicateName(true);\n    }\n  }, [name, contacts]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicateName) {\n      addContact(name, phone, '', email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"DDzZFwfUX4FqgOpaRf6SA3kfcn4=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","TileList","ContactForm","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicateName","setDuplicateName","exists","find","contact","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\r\n// import { TileList } from \"../../components/tileList/TileList\";\r\n\r\n// export const ContactsPage = ({currentContacts, addContact}) => {\r\n//   /*\r\n//   Define state variables for \r\n//   contact info and duplicate check\r\n//   */\r\n//  const [currentName, setCurrentName] = useState('');\r\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\r\n//  const [currentEmail, setCurrentEmail] = useState('');\r\n//  const [isDuplicate, setIsDuplicate] = useState(false);\r\n//  const [contacts, setContacts] = useState(currentContacts || []);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     /*\r\n//     Add contact info and clear data\r\n//     if the contact name is not a duplicate\r\n//     */\r\n\r\n//    if(!isDuplicate){\r\n//     addContact(currentName, currentPhoneNumber, currentEmail);\r\n//     setContacts(addContact);\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//    }\r\n//    /*if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\r\n//     addContact(newContact); // Callback to notify the parent component\r\n//     // Clear the form after successful submission\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//   }*/\r\n//   };\r\n\r\n//   /*\r\n//   Using hooks, check for contact name in the \r\n//   contacts array variable in props\r\n//   */\r\n//   useEffect(() => {\r\n//     const isDuplicate = contacts.some((contact) => contact.name === currentName);\r\n//     setIsDuplicate(isDuplicate);\r\n//   }, [currentName, contacts]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <section>\r\n//         <h2>Add Contact</h2> \r\n//         <ContactForm\r\n//           name={currentName}\r\n//           phone={currentPhoneNumber}\r\n//           email={currentEmail}\r\n//           setName={setCurrentName}\r\n//           setPhone={setCurrentPhoneNumber}\r\n//           setEmail={setCurrentEmail}\r\n//           handleSubmit={handleSubmit}\r\n//           isNameDuplicate={setIsDuplicate}\r\n//         />\r\n//       </section>\r\n//       <hr />\r\n//       <section>\r\n//         <h2>Contacts</h2>\r\n//         <TileList tiles={contacts} />\r\n//       </section>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nimport React, { useState,  useEffect } from \"react\";\r\n\r\nimport { TileList } from '../../components/tileList/TileList';\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\n\r\nexport const ContactsPage = ({\r\n  contacts,\r\n  addContact\r\n}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicateName, setDuplicateName] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let exists = contacts.find(contact => contact.name === name);\r\n    if (exists) {\r\n      setDuplicateName(true);\r\n    }\r\n  },[name, contacts])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicateName) {\r\n      addContact(name, phone, '', email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n          />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          tiles={contacts}\r\n          />\r\n      </section>\r\n    </div>\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}