{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\n// import { TileList } from \"../../components/tileList/TileList\";\n\n// export const ContactsPage = ({currentContacts, addContact}) => {\n//   /*\n//   Define state variables for \n//   contact info and duplicate check\n//   */\n//  const [currentName, setCurrentName] = useState('');\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\n//  const [currentEmail, setCurrentEmail] = useState('');\n//  const [isDuplicate, setIsDuplicate] = useState(false);\n//  const [contacts, setContacts] = useState(currentContacts || []);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     /*\n//     Add contact info and clear data\n//     if the contact name is not a duplicate\n//     */\n\n//    /*if(!isDuplicate){\n//     addContact({currentName, currentPhoneNumber, currentEmail});\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//    }*/\n//    if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\n//     addContact(newContact); // Callback to notify the parent component\n//     // Clear the form after successful submission\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//   }\n//   };\n\n//   /*\n//   Using hooks, check for contact name in the \n//   contacts array variable in props\n//   */\n//   useEffect(() => {\n//     const isDuplicate = contacts.some((contact) => contact.currentName === currentName);\n//     setIsDuplicate(isDuplicate);\n//   }, [currentName, contacts]);\n\n//   return (\n//     <div>\n//       <section>\n//         <h2>Add Contact</h2> \n//         <ContactForm\n//           name={currentName}\n//           phone={currentPhoneNumber}\n//           email={currentEmail}\n//           setName={setCurrentName}\n//           setPhone={setCurrentPhoneNumber}\n//           setEmail={setCurrentEmail}\n//           handleSubmit={handleSubmit}\n//           isNameDuplicate={setIsDuplicate}\n//         />\n//       </section>\n//       <hr />\n//       <section>\n//         <h2>Contacts</h2>\n//         <TileList data={contacts} />\n//       </section>\n//     </div>\n//   );\n// };\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setIsDuplicate] = useState(false);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        if (duplicate) {\n          setIsDuplicate(false);\n        }\n        break;\n      case \"phone\":\n        setPhone(value);\n        break;\n      case \"email\":\n        setEmail(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    //get values from state\n    const newContactName = name;\n    const newContactPhone = phone;\n    const newContactEmail = email;\n\n    //check whether this contact already exists\n    if (props.contacts.find(contact => contact.Name === newContactName)) {\n      console.log(\"Duplicate found\");\n      setIsDuplicate(true);\n      return;\n    } else {\n      console.log(\"new contact found, adding to thingy\");\n      if (!props.contacts.length) {\n        props.setContact([{\n          'Name': newContactName,\n          'Phone': newContactPhone,\n          'eMail': newContactEmail\n        }]);\n      } else {\n        props.setContact([{\n          'Name': newContactName,\n          'Phone': newContactPhone,\n          'eMail': newContactEmail\n        }, ...props.contacts]);\n      }\n    }\n    //clear inputs\n    setName(\"\");\n    setPhone(\"\");\n    setEmail(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        onSubmit: handleSubmit,\n        name: name,\n        phone: phone,\n        email: email,\n        setName: handleChange,\n        setPhone: handleChange,\n        setEmail: handleChange,\n        isDuplicate: duplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contacts: props.contacts,\n        delete: props.delete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"wacLGXimPYPWfuqGJhI6USiLBXs=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","name","setName","phone","setPhone","email","setEmail","duplicate","setIsDuplicate","handleChange","e","value","target","handleSubmit","preventDefault","newContactName","newContactPhone","newContactEmail","contacts","find","contact","Name","console","log","length","setContact","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","isDuplicate","delete","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\r\n// import { TileList } from \"../../components/tileList/TileList\";\r\n\r\n// export const ContactsPage = ({currentContacts, addContact}) => {\r\n//   /*\r\n//   Define state variables for \r\n//   contact info and duplicate check\r\n//   */\r\n//  const [currentName, setCurrentName] = useState('');\r\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\r\n//  const [currentEmail, setCurrentEmail] = useState('');\r\n//  const [isDuplicate, setIsDuplicate] = useState(false);\r\n//  const [contacts, setContacts] = useState(currentContacts || []);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     /*\r\n//     Add contact info and clear data\r\n//     if the contact name is not a duplicate\r\n//     */\r\n\r\n//    /*if(!isDuplicate){\r\n//     addContact({currentName, currentPhoneNumber, currentEmail});\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//    }*/\r\n//    if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\r\n//     addContact(newContact); // Callback to notify the parent component\r\n//     // Clear the form after successful submission\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//   }\r\n//   };\r\n\r\n//   /*\r\n//   Using hooks, check for contact name in the \r\n//   contacts array variable in props\r\n//   */\r\n//   useEffect(() => {\r\n//     const isDuplicate = contacts.some((contact) => contact.currentName === currentName);\r\n//     setIsDuplicate(isDuplicate);\r\n//   }, [currentName, contacts]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <section>\r\n//         <h2>Add Contact</h2> \r\n//         <ContactForm\r\n//           name={currentName}\r\n//           phone={currentPhoneNumber}\r\n//           email={currentEmail}\r\n//           setName={setCurrentName}\r\n//           setPhone={setCurrentPhoneNumber}\r\n//           setEmail={setCurrentEmail}\r\n//           handleSubmit={handleSubmit}\r\n//           isNameDuplicate={setIsDuplicate}\r\n//         />\r\n//       </section>\r\n//       <hr />\r\n//       <section>\r\n//         <h2>Contacts</h2>\r\n//         <TileList data={contacts} />\r\n//       </section>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport {ContactForm} from \"../../components/contactForm/ContactForm\"\r\nimport {TileList} from \"../../components/tileList/TileList\"\r\n\r\nexport const ContactsPage = (props) => {\r\n  \r\n  const [name,setName] = useState(\"\");\r\nconst [phone,setPhone] = useState(\"\");\r\nconst [email,setEmail] = useState(\"\");\r\nconst [duplicate,setIsDuplicate] = useState(false);\r\n\r\nconst handleChange = (e) => {\r\n  const {name,value} = e.target;\r\n  switch(name){\r\n    case \"name\":\r\n      setName(value);\r\n      if (duplicate){\r\n        setIsDuplicate(false)\r\n      }\r\n      break;\r\n    case \"phone\":\r\n      setPhone(value);\r\n      break;\r\n    case \"email\":\r\n      setEmail(value);\r\n      break;\r\n      default:\r\n        return;\r\n  }\r\n  }\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //get values from state\r\n   const newContactName = name;\r\n   const newContactPhone = phone;\r\n   const newContactEmail = email;\r\n\r\n   //check whether this contact already exists\r\n   if (props.contacts.find(contact=> contact.Name===newContactName)){\r\n     console.log(\"Duplicate found\");\r\n     setIsDuplicate(true);\r\n     return;\r\n   }\r\n   else {\r\n     console.log(\"new contact found, adding to thingy\")\r\n     if (!props.contacts.length){\r\n      props.setContact([{'Name': newContactName, 'Phone': newContactPhone,'eMail':newContactEmail}]);\r\n     }\r\n     else{\r\n       props.setContact([{'Name': newContactName, 'Phone': newContactPhone,'eMail':newContactEmail},...props.contacts]);\r\n   }\r\n  }\r\n//clear inputs\r\n  setName(\"\");\r\n  setPhone(\"\");\r\n  setEmail(\"\");\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <section className=\"form\">\r\n        <h2>Add Contact</h2> \r\n        <ContactForm onSubmit={handleSubmit} name={name} phone={phone} email={email} setName={handleChange} setPhone={handleChange} setEmail={handleChange} isDuplicate={duplicate}/>\r\n      </section>\r\n      <hr />\r\n      <section className=\"results\">\r\n        <h2>Contacts</h2>\r\n        <TileList contacts={props.contacts} delete={props.delete}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}