{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/App.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from \"react\";\n// import { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\"\n// import Root, { ROUTES } from \"./components/root/Root\";\n// import { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\n// import { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\n\n// function App() {\n//   /*\n//   Define state variables for \n//   contacts and appointments \n//   */\n//   const [contacts, setContacts] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n\n//   /*\n//   Implement functions to add data to\n//   contacts and appointments\n//   */\n//     const addContact = (name, phoneNumber, email) => {\n//     const newContact = {\n//       name: name, \n//       phoneNumber: phoneNumber,\n//       email: email,\n//     };\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\n//   };\n//     const addAppoint = (name, phoneNumber, email) => {\n//       const newAppoint={\n//         name: name, \n//         phoneNumber: phoneNumber, \n//         email: email,\n//       };\n//       setAppointments((prevAppointments) => [...prevAppointments, newAppoint]);\n//     };\n\n//   const router = createBrowserRouter(createRoutesFromElements(\n//     <Route path=\"/\" element={ <Root/> }>\n//       <Route index element={ <Navigate to={ROUTES.CONTACTS} replace/> }/>\n//       <Route path={ROUTES.CONTACTS} element={ <ContactsPage /> /* Add props to ContactsPage */ }/>\n//       <Route path={ROUTES.APPOINTMENTS} element={ <AppointmentsPage /> /* Add props to AppointmentsPage */ }/>\n//     </Route>\n//   ));\n\n//   return (\n//     <>\n//       <nav>\n//         <NavLink to={ROUTES.CONTACTS} activeClassName='active'>\n//           Contacts\n//         </NavLink>\n//         <NavLink to={ROUTES.APPOINTMENTS} activeClassName='active'>\n//           Appointments\n//         </NavLink>\n//       </nav>\n//       <main>\n//         <Switch>\n//           <Route exact path='/'>\n//             <Redirect to={ROUTES.CONTACTS} />\n//           </Route>\n//           <Route path={ROUTES.CONTACTS}>\n//             {/* Add props to ContactsPage */}\n//             <ContactsPage contacts={contacts} addContact={addContact} />\n//           </Route>\n//           <Route path={ROUTES.APPOINTMENTS}>\n//             {/* Add props to AppointmentsPage */}\n//             <AppointmentsPage\n//               contacts={contacts}\n//               appointments={appointments}\n//               addAppointment={addAppoint}\n//             />\n//           </Route>\n//         </Switch>\n//       </main>\n//     </>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from \"react\";\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\nimport { AppointmentsPage } from \"../src/containers/appointmentsPage/AppointmentsPage\";\nimport { ContactsPage } from \"../src/containers/contactsPage/ContactsPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contacts, setContacts] = useState([{\n    name: 'Sample Nanase.E',\n    phone: 'ðŸ“ž 333 111 2222',\n    email: 'ðŸ“§ nanase@contacts.com'\n  }]);\n  const [appointments, setAppointments] = useState([{\n    title: 'Sample meeting',\n    contact: 'With: Sample Nanase.E',\n    date: 'ðŸ“… 2021-12-01',\n    time: 'ðŸ•— 12:00'\n  }]);\n  const [removeId, setRemoveId] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  const ROUTES = {\n    CONTACTS: \"/contacts\",\n    APPOINTMENTS: \"/appointments\"\n  };\n  const addContact = (name, phone, email) => {\n    phone = `ðŸ“ž ${phone}`;\n    email = `ðŸ“§ ${email}`;\n    setContacts([...contacts, {\n      name: name,\n      phone: phone,\n      email: email\n    }]);\n  };\n  const removeContact = removeId => {\n    const newContacts = contacts.filter(contact => contact.name !== removeId);\n    setContacts(newContacts);\n  };\n  const addAppointment = (title, contact, date, time) => {\n    contact = `With: ${contact}`;\n    date = `ðŸ“… ${date}`;\n    time = `ðŸ•— ${time}`;\n    setAppointments([...appointments, {\n      title: title,\n      contact: contact,\n      date: date,\n      time: time\n    }]);\n  };\n  const removeAppointment = removeId => {\n    const newAppointments = appointments.filter(appointment => appointment.title !== removeId);\n    setAppointments(newAppointments);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        to: ROUTES.CONTACTS,\n        activeClassName: \"active\",\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        to: ROUTES.APPOINTMENTS,\n        activeClassName: \"active\",\n        children: \"Appointments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Redirect, {\n            to: ROUTES.CONTACTS\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: ROUTES.CONTACTS,\n          children: /*#__PURE__*/_jsxDEV(ContactsPage, {\n            contacts: contacts,\n            addContact: addContact,\n            removeContact: removeContact,\n            removeId: removeId,\n            setRemoveId: setRemoveId,\n            duplicate: duplicate,\n            setDuplicate: setDuplicate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: ROUTES.APPOINTMENTS,\n          children: /*#__PURE__*/_jsxDEV(AppointmentsPage, {\n            appointments: appointments,\n            contacts: contacts,\n            addAppointment: addAppointment,\n            removeAppointment: removeAppointment,\n            removeId: removeId,\n            setRemoveId: setRemoveId,\n            duplicate: duplicate,\n            setDuplicate: setDuplicate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Bdc4n7xoYkQckLB/XLG8tej2yJU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Switch","Route","Redirect","NavLink","AppointmentsPage","ContactsPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","contacts","setContacts","name","phone","email","appointments","setAppointments","title","contact","date","time","removeId","setRemoveId","duplicate","setDuplicate","ROUTES","CONTACTS","APPOINTMENTS","addContact","removeContact","newContacts","filter","addAppointment","removeAppointment","newAppointments","appointment","children","to","activeClassName","fileName","_jsxFileName","lineNumber","columnNumber","exact","path","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/App.js"],"sourcesContent":["// import React, {useState} from \"react\";\r\n// import { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\"\r\n// import Root, { ROUTES } from \"./components/root/Root\";\r\n// import { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\n// import { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\n// function App() {\r\n//   /*\r\n//   Define state variables for \r\n//   contacts and appointments \r\n//   */\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [appointments, setAppointments] = useState([]);\r\n\r\n//   /*\r\n//   Implement functions to add data to\r\n//   contacts and appointments\r\n//   */\r\n//     const addContact = (name, phoneNumber, email) => {\r\n//     const newContact = {\r\n//       name: name, \r\n//       phoneNumber: phoneNumber,\r\n//       email: email,\r\n//     };\r\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\r\n//   };\r\n//     const addAppoint = (name, phoneNumber, email) => {\r\n//       const newAppoint={\r\n//         name: name, \r\n//         phoneNumber: phoneNumber, \r\n//         email: email,\r\n//       };\r\n//       setAppointments((prevAppointments) => [...prevAppointments, newAppoint]);\r\n//     };\r\n\r\n\r\n//   const router = createBrowserRouter(createRoutesFromElements(\r\n//     <Route path=\"/\" element={ <Root/> }>\r\n//       <Route index element={ <Navigate to={ROUTES.CONTACTS} replace/> }/>\r\n//       <Route path={ROUTES.CONTACTS} element={ <ContactsPage /> /* Add props to ContactsPage */ }/>\r\n//       <Route path={ROUTES.APPOINTMENTS} element={ <AppointmentsPage /> /* Add props to AppointmentsPage */ }/>\r\n//     </Route>\r\n//   ));\r\n  \r\n//   return (\r\n//     <>\r\n//       <nav>\r\n//         <NavLink to={ROUTES.CONTACTS} activeClassName='active'>\r\n//           Contacts\r\n//         </NavLink>\r\n//         <NavLink to={ROUTES.APPOINTMENTS} activeClassName='active'>\r\n//           Appointments\r\n//         </NavLink>\r\n//       </nav>\r\n//       <main>\r\n//         <Switch>\r\n//           <Route exact path='/'>\r\n//             <Redirect to={ROUTES.CONTACTS} />\r\n//           </Route>\r\n//           <Route path={ROUTES.CONTACTS}>\r\n//             {/* Add props to ContactsPage */}\r\n//             <ContactsPage contacts={contacts} addContact={addContact} />\r\n//           </Route>\r\n//           <Route path={ROUTES.APPOINTMENTS}>\r\n//             {/* Add props to AppointmentsPage */}\r\n//             <AppointmentsPage\r\n//               contacts={contacts}\r\n//               appointments={appointments}\r\n//               addAppointment={addAppoint}\r\n//             />\r\n//           </Route>\r\n//         </Switch>\r\n//       </main>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\nimport React, {useState} from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"../src/containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"../src/containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  const [ contacts, setContacts ] = useState([{name: 'Sample Nanase.E', phone: 'ðŸ“ž 333 111 2222', email:'ðŸ“§ nanase@contacts.com'}]);\r\n  const [ appointments, setAppointments ] = useState([{title: 'Sample meeting', contact: 'With: Sample Nanase.E', date: 'ðŸ“… 2021-12-01', time: 'ðŸ•— 12:00'}]); \r\n\r\n  const [removeId, setRemoveId] = useState('');\r\n  const [duplicate, setDuplicate] = useState(false);\r\n  \r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  const addContact = (name, phone, email) => {\r\n    phone = `ðŸ“ž ${phone}` ;  \r\n    email = `ðŸ“§ ${email}` ;\r\n    setContacts([\r\n      ...contacts, {\r\n        name: name,\r\n        phone: phone,  \r\n        email: email,\r\n      }\r\n    ])\r\n  }\r\n  const removeContact = (removeId) => {\r\n    const newContacts = contacts.filter((contact) => contact.name !== removeId)\r\n\r\n    setContacts(newContacts);\r\n  }\r\n\r\n \r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n\r\n    contact = `With: ${contact}`;\r\n    date = `ðŸ“… ${date}`;\r\n    time = `ðŸ•— ${time}`;  \r\n\r\n    setAppointments([\r\n      ...appointments, {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time,\r\n      }\r\n    ])\r\n  }\r\n\r\n  const removeAppointment = (removeId) => {\r\n    const newAppointments = appointments.filter((appointment) => appointment.title !== removeId);\r\n\r\n    setAppointments(newAppointments);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n            <ContactsPage\r\n            contacts={contacts} \r\n            addContact={addContact}\r\n            removeContact={removeContact}\r\n            removeId={removeId}\r\n            setRemoveId={setRemoveId}\r\n            duplicate={duplicate}\r\n            setDuplicate={setDuplicate}\r\n            />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            <AppointmentsPage\r\n            appointments={appointments}\r\n            contacts={contacts} \r\n            addAppointment={addAppointment}\r\n            removeAppointment={removeAppointment}\r\n            removeId={removeId}\r\n            setRemoveId={setRemoveId}\r\n            duplicate={duplicate}\r\n            setDuplicate={setDuplicate}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,kBAAkB;AAEnE,SAASC,gBAAgB,QAAQ,qDAAqD;AACtF,SAASC,YAAY,QAAQ,6CAA6C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAAEC,QAAQ,EAAEC,WAAW,CAAE,GAAGd,QAAQ,CAAC,CAAC;IAACe,IAAI,EAAE,iBAAiB;IAAEC,KAAK,EAAE,iBAAiB;IAAEC,KAAK,EAAC;EAAwB,CAAC,CAAC,CAAC;EACjI,MAAM,CAAEC,YAAY,EAAEC,eAAe,CAAE,GAAGnB,QAAQ,CAAC,CAAC;IAACoB,KAAK,EAAE,gBAAgB;IAAEC,OAAO,EAAE,uBAAuB;IAAEC,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC,CAAC;EAE1J,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM4B,MAAM,GAAG;IACbC,QAAQ,EAAE,WAAW;IACrBC,YAAY,EAAE;EAChB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAChB,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACzCD,KAAK,GAAI,MAAKA,KAAM,EAAC;IACrBC,KAAK,GAAI,MAAKA,KAAM,EAAC;IACrBH,WAAW,CAAC,CACV,GAAGD,QAAQ,EAAE;MACXE,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA;IACT,CAAC,CACF,CAAC;EACJ,CAAC;EACD,MAAMe,aAAa,GAAIR,QAAQ,IAAK;IAClC,MAAMS,WAAW,GAAGpB,QAAQ,CAACqB,MAAM,CAAEb,OAAO,IAAKA,OAAO,CAACN,IAAI,KAAKS,QAAQ,CAAC;IAE3EV,WAAW,CAACmB,WAAW,CAAC;EAC1B,CAAC;EAID,MAAME,cAAc,GAAGA,CAACf,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAErDF,OAAO,GAAI,SAAQA,OAAQ,EAAC;IAC5BC,IAAI,GAAI,MAAKA,IAAK,EAAC;IACnBC,IAAI,GAAI,MAAKA,IAAK,EAAC;IAEnBJ,eAAe,CAAC,CACd,GAAGD,YAAY,EAAE;MACfE,KAAK,EAAEA,KAAK;MACZC,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA;IACR,CAAC,CACF,CAAC;EACJ,CAAC;EAED,MAAMa,iBAAiB,GAAIZ,QAAQ,IAAK;IACtC,MAAMa,eAAe,GAAGnB,YAAY,CAACgB,MAAM,CAAEI,WAAW,IAAKA,WAAW,CAAClB,KAAK,KAAKI,QAAQ,CAAC;IAE5FL,eAAe,CAACkB,eAAe,CAAC;EAClC,CAAC;EAGD,oBACE7B,OAAA,CAAAE,SAAA;IAAA6B,QAAA,gBACE/B,OAAA;MAAA+B,QAAA,gBACE/B,OAAA,CAACJ,OAAO;QAACoC,EAAE,EAAEZ,MAAM,CAACC,QAAS;QAACY,eAAe,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAEvD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eACVrC,OAAA,CAACJ,OAAO;QAACoC,EAAE,EAAEZ,MAAM,CAACE,YAAa;QAACW,eAAe,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAE3D;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACNrC,OAAA;MAAA+B,QAAA,eACE/B,OAAA,CAACP,MAAM;QAAAsC,QAAA,gBACL/B,OAAA,CAACN,KAAK;UAAC4C,KAAK;UAACC,IAAI,EAAC,GAAG;UAAAR,QAAA,eACnB/B,OAAA,CAACL,QAAQ;YAACqC,EAAE,EAAEZ,MAAM,CAACC;UAAS;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACRrC,OAAA,CAACN,KAAK;UAAC6C,IAAI,EAAEnB,MAAM,CAACC,QAAS;UAAAU,QAAA,eAC3B/B,OAAA,CAACF,YAAY;YACbO,QAAQ,EAAEA,QAAS;YACnBkB,UAAU,EAAEA,UAAW;YACvBC,aAAa,EAAEA,aAAc;YAC7BR,QAAQ,EAAEA,QAAS;YACnBC,WAAW,EAAEA,WAAY;YACzBC,SAAS,EAAEA,SAAU;YACrBC,YAAY,EAAEA;UAAa;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eACRrC,OAAA,CAACN,KAAK;UAAC6C,IAAI,EAAEnB,MAAM,CAACE,YAAa;UAAAS,QAAA,eAC/B/B,OAAA,CAACH,gBAAgB;YACjBa,YAAY,EAAEA,YAAa;YAC3BL,QAAQ,EAAEA,QAAS;YACnBsB,cAAc,EAAEA,cAAe;YAC/BC,iBAAiB,EAAEA,iBAAkB;YACrCZ,QAAQ,EAAEA,QAAS;YACnBC,WAAW,EAAEA,WAAY;YACzBC,SAAS,EAAEA,SAAU;YACrBC,YAAY,EAAEA;UAAa;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACP,CAAC;AAEP;AAACjC,EAAA,CAhGQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAkGZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}