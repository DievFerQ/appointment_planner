{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\n// import { TileList } from \"../../components/tileList/TileList\";\n\n// export const ContactsPage = ({currentContacts, addContact}) => {\n//   /*\n//   Define state variables for \n//   contact info and duplicate check\n//   */\n//  const [currentName, setCurrentName] = useState('');\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\n//  const [currentEmail, setCurrentEmail] = useState('');\n//  const [isDuplicate, setIsDuplicate] = useState(false);\n//  const [contacts, setContacts] = useState(currentContacts || []);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     /*\n//     Add contact info and clear data\n//     if the contact name is not a duplicate\n//     */\n\n//    /*if(!isDuplicate){\n//     addContact({currentName, currentPhoneNumber, currentEmail});\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//    }*/\n//    if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\n//     addContact(newContact); // Callback to notify the parent component\n//     // Clear the form after successful submission\n//     setCurrentName('');\n//     setCurrentPhoneNumber('');\n//     setCurrentEmail('');\n//     setIsDuplicate(false);\n//   }\n//   };\n\n//   /*\n//   Using hooks, check for contact name in the \n//   contacts array variable in props\n//   */\n//   useEffect(() => {\n//     const isDuplicate = contacts.some((contact) => contact.currentName === currentName);\n//     setIsDuplicate(isDuplicate);\n//   }, [currentName, contacts]);\n\n//   return (\n//     <div>\n//       <section>\n//         <h2>Add Contact</h2> \n//         <ContactForm\n//           name={currentName}\n//           phone={currentPhoneNumber}\n//           email={currentEmail}\n//           setName={setCurrentName}\n//           setPhone={setCurrentPhoneNumber}\n//           setEmail={setCurrentEmail}\n//           handleSubmit={handleSubmit}\n//           isNameDuplicate={setIsDuplicate}\n//         />\n//       </section>\n//       <hr />\n//       <section>\n//         <h2>Contacts</h2>\n//         <TileList data={contacts} />\n//       </section>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { TileList } from '../../components/tileList/TileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, isDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicate) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    } else {\n      alert(`Contact ${name} already exists`);\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  const contactExists = (arr, contact) => {\n    return arr.some(el => el.name === contact);\n  };\n  useEffect(() => {\n    if (contactExists(contacts, name)) {\n      isDuplicate(true);\n    } else {\n      isDuplicate(false);\n    }\n  }, [contacts, name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"YU0E3msC5He4itRRz25JTCvumaI=\");\n_c = ContactsPage;\nContactsPage.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addContact: PropTypes.func.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicate","isDuplicate","handleSubmit","e","preventDefault","alert","contactExists","arr","contact","some","el","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","propTypes","arrayOf","object","isRequired","func","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// import { ContactForm } from \"../../components/contactForm/ContactForm\";\r\n// import { TileList } from \"../../components/tileList/TileList\";\r\n\r\n// export const ContactsPage = ({currentContacts, addContact}) => {\r\n//   /*\r\n//   Define state variables for \r\n//   contact info and duplicate check\r\n//   */\r\n//  const [currentName, setCurrentName] = useState('');\r\n//  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\r\n//  const [currentEmail, setCurrentEmail] = useState('');\r\n//  const [isDuplicate, setIsDuplicate] = useState(false);\r\n//  const [contacts, setContacts] = useState(currentContacts || []);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     /*\r\n//     Add contact info and clear data\r\n//     if the contact name is not a duplicate\r\n//     */\r\n\r\n//    /*if(!isDuplicate){\r\n//     addContact({currentName, currentPhoneNumber, currentEmail});\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//    }*/\r\n//    if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n//     const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n//     setContacts((prevContacts) => [...prevContacts, newContact]);\r\n//     addContact(newContact); // Callback to notify the parent component\r\n//     // Clear the form after successful submission\r\n//     setCurrentName('');\r\n//     setCurrentPhoneNumber('');\r\n//     setCurrentEmail('');\r\n//     setIsDuplicate(false);\r\n//   }\r\n//   };\r\n\r\n//   /*\r\n//   Using hooks, check for contact name in the \r\n//   contacts array variable in props\r\n//   */\r\n//   useEffect(() => {\r\n//     const isDuplicate = contacts.some((contact) => contact.currentName === currentName);\r\n//     setIsDuplicate(isDuplicate);\r\n//   }, [currentName, contacts]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <section>\r\n//         <h2>Add Contact</h2> \r\n//         <ContactForm\r\n//           name={currentName}\r\n//           phone={currentPhoneNumber}\r\n//           email={currentEmail}\r\n//           setName={setCurrentName}\r\n//           setPhone={setCurrentPhoneNumber}\r\n//           setEmail={setCurrentEmail}\r\n//           handleSubmit={handleSubmit}\r\n//           isNameDuplicate={setIsDuplicate}\r\n//         />\r\n//       </section>\r\n//       <hr />\r\n//       <section>\r\n//         <h2>Contacts</h2>\r\n//         <TileList data={contacts} />\r\n//       </section>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicate, isDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    } else {\r\n      alert(`Contact ${name} already exists`);\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  const contactExists = (arr, contact) => {\r\n    return arr.some((el) => el.name === contact);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contactExists(contacts, name)) {\r\n      isDuplicate(true);\r\n    } else {\r\n      isDuplicate(false);\r\n    }\r\n  }, [contacts, name]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactsPage.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}