{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    currentContacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [currentName, setCurrentName] = useState('');\n  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const [contacts, setContacts] = useState(currentContacts || []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    /*if(!isDuplicate){\r\n     addContact({currentName, currentPhoneNumber, currentEmail});\r\n     setCurrentName('');\r\n     setCurrentPhoneNumber('');\r\n     setCurrentEmail('');\r\n     setIsDuplicate(false);\r\n    }*/\n    if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\n      const newContact = {\n        currentName,\n        currentPhoneNumber,\n        currentEmail\n      };\n      setContacts(prevContacts => [...prevContacts, newContact]);\n      addContact(newContact); // Callback to notify the parent component\n      // Clear the form after successful submission\n      setName('');\n      setPhone('');\n      setEmail('');\n      setIsDuplicate(false);\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    const isDuplicate = contacts.some(contact => contact.currentName === currentName);\n    setIsDuplicate(isDuplicate);\n  }, [currentName, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: currentName,\n        phone: currentPhoneNumber,\n        email: currentEmail,\n        setCurrentName: setCurrentName,\n        setCurrentPhone: setCurrentPhoneNumber,\n        setCurrentEmail: setCurrentEmail,\n        handleSubmit: handleSubmit,\n        isNameDuplicate: setIsDuplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        data: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"eOZ+yY8yz5ZehsxGFmAx1gVAK8w=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","currentContacts","addContact","currentName","setCurrentName","currentPhoneNumber","setCurrentPhoneNumber","currentEmail","setCurrentEmail","isDuplicate","setIsDuplicate","contacts","setContacts","handleSubmit","e","preventDefault","newContact","prevContacts","setName","setPhone","setEmail","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","name","phone","email","setCurrentPhone","isNameDuplicate","data","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({currentContacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const [currentName, setCurrentName] = useState('');\r\n const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\r\n const [currentEmail, setCurrentEmail] = useState('');\r\n const [isDuplicate, setIsDuplicate] = useState(false);\r\n const [contacts, setContacts] = useState(currentContacts || []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n   /*if(!isDuplicate){\r\n    addContact({currentName, currentPhoneNumber, currentEmail});\r\n    setCurrentName('');\r\n    setCurrentPhoneNumber('');\r\n    setCurrentEmail('');\r\n    setIsDuplicate(false);\r\n   }*/\r\n   if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n    const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n    setContacts((prevContacts) => [...prevContacts, newContact]);\r\n    addContact(newContact); // Callback to notify the parent component\r\n    // Clear the form after successful submission\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n    setIsDuplicate(false);\r\n  }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    const isDuplicate = contacts.some((contact) => contact.currentName === currentName);\r\n    setIsDuplicate(isDuplicate);\r\n  }, [currentName, contacts]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n          name={currentName}\r\n          phone={currentPhoneNumber}\r\n          email={currentEmail}\r\n          setCurrentName={setCurrentName}\r\n          setCurrentPhone={setCurrentPhoneNumber}\r\n          setCurrentEmail={setCurrentEmail}\r\n          handleSubmit={handleSubmit}\r\n          isNameDuplicate={setIsDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}