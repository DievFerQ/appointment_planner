{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    currentContacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [currentName, setCurrentName] = useState('');\n  const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const [contacts, setContacts] = useState(currentContacts || []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (!isDuplicate) {\n      addContact(currentName, currentPhoneNumber, currentEmail);\n      setContacts(addContact);\n      setCurrentName('');\n      setCurrentPhoneNumber('');\n      setCurrentEmail('');\n      setIsDuplicate(false);\n    }\n    /*if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n     const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n     setContacts((prevContacts) => [...prevContacts, newContact]);\r\n     addContact(newContact); // Callback to notify the parent component\r\n     // Clear the form after successful submission\r\n     setCurrentName('');\r\n     setCurrentPhoneNumber('');\r\n     setCurrentEmail('');\r\n     setIsDuplicate(false);\r\n    }*/\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    const isDuplicate = contacts.some(contact => contact.name === currentName);\n    setIsDuplicate(isDuplicate);\n  }, [currentName, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: currentName,\n        setName: setCurrentName,\n        phone: currentPhoneNumber,\n        setPhone: setCurrentPhoneNumber,\n        email: currentEmail,\n        setEmail: setCurrentEmail,\n        handleSubmit: handleSubmit,\n        isNameDuplicate: setIsDuplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { useState,  useEffect } from \"react\";\n// import { TileList } from '../../components/tileList/TileList';\n// import { ContactForm } from '../../components/contactForm/ContactForm';\n\n// export const ContactsPage = ({\n//   contacts,\n//   addContact\n// }) => {\n//   /*\n//   Define state variables for \n//   contact info and duplicate check\n//   */\n//   const [name, setName] = useState(\"\");\n//   const [phone, setPhone] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [duplicateName, setDuplicateName] = useState(false);\n\n//   useEffect(() => {\n//     let exists = contacts.find(contact => contact.name === name);\n//     if (exists) {\n//       setDuplicateName(true);\n//     }\n//   },[name, contacts])\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     /*\n//     Add contact info and clear data\n//     if the contact name is not a duplicate\n//     */\n//     if (!duplicateName) {\n//       addContact(name, phone, email);\n//       setName('');\n//       setPhone('');\n//       setEmail('');\n//     }\n//   };\n\n//   /*\n//   Using hooks, check for contact name in the \n//   contacts array variable in props\n//   */\n\n//   return (\n//     <div>\n//       <section>\n//         <h2>Add Contact</h2> \n//         <ContactForm\n//           name={name}\n//           setName={setName}\n//           phone={phone}\n//           setPhone={setPhone}\n//           email={email}\n//           setEmail={setEmail}\n//           handleSubmit={handleSubmit}\n//           />\n//       </section>\n//       <hr />\n//       <section>\n//         <h2>Contacts</h2>\n//         <TileList\n//           tiles={contacts}\n//           />\n//       </section>\n//     </div>\n//   );\n// };\n_s(ContactsPage, \"eOZ+yY8yz5ZehsxGFmAx1gVAK8w=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","currentContacts","addContact","currentName","setCurrentName","currentPhoneNumber","setCurrentPhoneNumber","currentEmail","setCurrentEmail","isDuplicate","setIsDuplicate","contacts","setContacts","handleSubmit","e","preventDefault","some","contact","name","children","fileName","_jsxFileName","lineNumber","columnNumber","setName","phone","setPhone","email","setEmail","isNameDuplicate","tiles","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({currentContacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const [currentName, setCurrentName] = useState('');\r\n const [currentPhoneNumber, setCurrentPhoneNumber] = useState('');\r\n const [currentEmail, setCurrentEmail] = useState('');\r\n const [isDuplicate, setIsDuplicate] = useState(false);\r\n const [contacts, setContacts] = useState(currentContacts || []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n   if(!isDuplicate){\r\n    addContact(currentName, currentPhoneNumber, currentEmail);\r\n    setContacts(addContact);\r\n    setCurrentName('');\r\n    setCurrentPhoneNumber('');\r\n    setCurrentEmail('');\r\n    setIsDuplicate(false);\r\n   }\r\n   /*if (!isDuplicate && currentName && currentPhoneNumber && currentEmail) {\r\n    const newContact = { currentName, currentPhoneNumber, currentEmail };\r\n    setContacts((prevContacts) => [...prevContacts, newContact]);\r\n    addContact(newContact); // Callback to notify the parent component\r\n    // Clear the form after successful submission\r\n    setCurrentName('');\r\n    setCurrentPhoneNumber('');\r\n    setCurrentEmail('');\r\n    setIsDuplicate(false);\r\n  }*/\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    const isDuplicate = contacts.some((contact) => contact.name === currentName);\r\n    setIsDuplicate(isDuplicate);\r\n  }, [currentName, contacts]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n          name={currentName}\r\n          setName={setCurrentName}\r\n          phone={currentPhoneNumber}\r\n          setPhone={setCurrentPhoneNumber}\r\n          email={currentEmail}\r\n          setEmail={setCurrentEmail}\r\n          handleSubmit={handleSubmit}\r\n          isNameDuplicate={setIsDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\n// import React, { useState,  useEffect } from \"react\";\r\n// import { TileList } from '../../components/tileList/TileList';\r\n// import { ContactForm } from '../../components/contactForm/ContactForm';\r\n\r\n// export const ContactsPage = ({\r\n//   contacts,\r\n//   addContact\r\n// }) => {\r\n//   /*\r\n//   Define state variables for \r\n//   contact info and duplicate check\r\n//   */\r\n//   const [name, setName] = useState(\"\");\r\n//   const [phone, setPhone] = useState('');\r\n//   const [email, setEmail] = useState('');\r\n//   const [duplicateName, setDuplicateName] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     let exists = contacts.find(contact => contact.name === name);\r\n//     if (exists) {\r\n//       setDuplicateName(true);\r\n//     }\r\n//   },[name, contacts])\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     /*\r\n//     Add contact info and clear data\r\n//     if the contact name is not a duplicate\r\n//     */\r\n//     if (!duplicateName) {\r\n//       addContact(name, phone, email);\r\n//       setName('');\r\n//       setPhone('');\r\n//       setEmail('');\r\n//     }\r\n//   };\r\n\r\n//   /*\r\n//   Using hooks, check for contact name in the \r\n//   contacts array variable in props\r\n//   */\r\n\r\n//   return (\r\n//     <div>\r\n//       <section>\r\n//         <h2>Add Contact</h2> \r\n//         <ContactForm\r\n//           name={name}\r\n//           setName={setName}\r\n//           phone={phone}\r\n//           setPhone={setPhone}\r\n//           email={email}\r\n//           setEmail={setEmail}\r\n//           handleSubmit={handleSubmit}\r\n//           />\r\n//       </section>\r\n//       <hr />\r\n//       <section>\r\n//         <h2>Contacts</h2>\r\n//         <TileList\r\n//           tiles={contacts}\r\n//           />\r\n//       </section>\r\n//     </div>\r\n//   );\r\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}