{"ast":null,"code":"var _jsxFileName = \"/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    //  if(!isDuplicate){\n    //   addContact(name, phone, email);\n    //   setName('');\n    //   setPhone('');\n    //   setEmail('');\n    //   setIsDuplicate(false);\n    //  }else{\n    //   alert(\"Duplicate user\");\n    //  }\n    if (!isDuplicate && name && phone && email) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n      setIsDuplicate(false);\n    } else {\n      alert(\"Duplicate\");\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    let duplicateItem = contacts.some(contact => contact.name === name);\n    setIsDuplicate(duplicateItem);\n  }, [name, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit,\n        isNameDuplicate: setIsDuplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n//----------------------------------------\n\n// import React, { useState,  useEffect } from \"react\";\n// import { TileList } from '../../components/tileList/TileList';\n// import { ContactForm } from '../../components/contactForm/ContactForm';\n\n// export const ContactsPage = ({\n//   contacts,\n//   addContact\n// }) => {\n//   /*\n//   Define state variables for \n//   contact info and duplicate check\n//   */\n//   const [name, setName] = useState(\"\");\n//   const [phone, setPhone] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [duplicateName, setDuplicateName] = useState(false);\n\n//   useEffect(() => {\n//     let exists = contacts.find(contact => contact.name === name);\n//     if (exists) {\n//       setDuplicateName(true);\n//     }\n//   },[name, contacts])\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     /*\n//     Add contact info and clear data\n//     if the contact name is not a duplicate\n//     */\n//     if (!duplicateName) {\n//       addContact(name, phone, email);\n//       setName('');\n//       setPhone('');\n//       setEmail('');\n//     }else{\n//       alert(\"Duplicate, try again\");\n//     }\n//   };\n\n//   /*\n//   Using hooks, check for contact name in the \n//   contacts array variable in props\n//   */\n\n//   return (\n//     <div>\n//       <section>\n//         <h2>Add Contact</h2> \n//         <ContactForm\n//           name={name}\n//           setName={setName}\n//           phone={phone}\n//           setPhone={setPhone}\n//           email={email}\n//           setEmail={setEmail}\n//           handleSubmit={handleSubmit}\n//           />\n//       </section>\n//       <hr />\n//       <section>\n//         <h2>Contacts</h2>\n//         <TileList\n//           tiles={contacts}\n//           />\n//       </section>\n//     </div>\n//   );\n// };\n_s(ContactsPage, \"RdI3LyrKuvO9Gqn84BBEmFcaw4Y=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","alert","duplicateItem","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","isNameDuplicate","tiles","_c","$RefreshReg$"],"sources":["/Users/dievfer/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const [name, setName] = useState('');\r\n const [phone, setPhone] = useState('');\r\n const [email, setEmail] = useState('');\r\n const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n  //  if(!isDuplicate){\r\n  //   addContact(name, phone, email);\r\n  //   setName('');\r\n  //   setPhone('');\r\n  //   setEmail('');\r\n  //   setIsDuplicate(false);\r\n  //  }else{\r\n  //   alert(\"Duplicate user\");\r\n  //  }\r\n   if (!isDuplicate && name && phone && email) {\r\n    addContact( name, phone, email );\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n    setIsDuplicate(false);\r\n  }else{\r\n    alert(\"Duplicate\")\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n  }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    let duplicateItem = contacts.some((contact) => contact.name === name);\r\n    setIsDuplicate(duplicateItem);\r\n  }, [name, contacts]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n          isNameDuplicate={setIsDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\n//----------------------------------------\r\n\r\n\r\n// import React, { useState,  useEffect } from \"react\";\r\n// import { TileList } from '../../components/tileList/TileList';\r\n// import { ContactForm } from '../../components/contactForm/ContactForm';\r\n\r\n// export const ContactsPage = ({\r\n//   contacts,\r\n//   addContact\r\n// }) => {\r\n//   /*\r\n//   Define state variables for \r\n//   contact info and duplicate check\r\n//   */\r\n//   const [name, setName] = useState(\"\");\r\n//   const [phone, setPhone] = useState('');\r\n//   const [email, setEmail] = useState('');\r\n//   const [duplicateName, setDuplicateName] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     let exists = contacts.find(contact => contact.name === name);\r\n//     if (exists) {\r\n//       setDuplicateName(true);\r\n//     }\r\n//   },[name, contacts])\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     /*\r\n//     Add contact info and clear data\r\n//     if the contact name is not a duplicate\r\n//     */\r\n//     if (!duplicateName) {\r\n//       addContact(name, phone, email);\r\n//       setName('');\r\n//       setPhone('');\r\n//       setEmail('');\r\n//     }else{\r\n//       alert(\"Duplicate, try again\");\r\n//     }\r\n//   };\r\n\r\n//   /*\r\n//   Using hooks, check for contact name in the \r\n//   contacts array variable in props\r\n//   */\r\n\r\n//   return (\r\n//     <div>\r\n//       <section>\r\n//         <h2>Add Contact</h2> \r\n//         <ContactForm\r\n//           name={name}\r\n//           setName={setName}\r\n//           phone={phone}\r\n//           setPhone={setPhone}\r\n//           email={email}\r\n//           setEmail={setEmail}\r\n//           handleSubmit={handleSubmit}\r\n//           />\r\n//       </section>\r\n//       <hr />\r\n//       <section>\r\n//         <h2>Contacts</h2>\r\n//         <TileList\r\n//           tiles={contacts}\r\n//           />\r\n//       </section>\r\n//     </div>\r\n//   );\r\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}